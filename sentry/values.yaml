prefix:

user:
  create: true
  email: admin@sentry.com
  password: aaaa

images:
  sentry:
    repository: getsentry/sentry
    tag: 10.0.0
    pullPolicy: IfNotPresent
    # imagePullSecrets: []
  snuba:
    repository: getsentry/snuba
    tag: f9e388782bf85e2ab0c879a08d3a59541ce093b2
    pullPolicy: IfNotPresent
    # imagePullSecrets: []

sentry:
  web:
    replicas: 1
    env: {}
    probeInitialDelaySeconds: 10
    resources: {}
    affinity: {}
    nodeSelector: {}
    # tolerations: []
    # podLabels: []
  worker:
    replicas: 1
    # concurrency: 4
    env: {}
    resources: {}
    affinity: {}
    nodeSelector: {}
    # tolerations: []
    # podLabels: []
  workerRedis:
    replicas: 1
    # concurrency: 4
    env: {}
    resources: {}
    affinity: {}
    nodeSelector: {}
    # tolerations: []
    # podLabels: []
  cron:
    env: {}
    resources: {}
    affinity: {}
    nodeSelector: {}
    # tolerations: []
    # podLabels: []
  postProcessForward:
    replicas: 1
    env: {}
    resources: {}
    affinity: {}
    nodeSelector: {}
    # tolerations: []
    # podLabels: []

snuba:
  api:
    replicas: 1
    env: {}
    probeInitialDelaySeconds: 10
    resources: {}
    affinity: {}
    nodeSelector: {}
    # tolerations: []
    # podLabels: []
  consumer:
    replicas: 1
    env: {}
    resources: {}
    affinity: {}
    nodeSelector: {}
    # tolerations: []
    # podLabels: []
  replacer:
    env: {}
    resources: {}
    affinity: {}
    nodeSelector: {}
    # tolerations: []
    # podLabels: []


hooks:
  enabled: true
  dbInit:
    resources:
      limits:
        memory: 2048Mi
      requests:
        cpu: 300m
        memory: 2048Mi
  snubaInit:
    resources:
      limits:
        cpu: 2000m
        memory: 1Gi
      requests:
        cpu: 700m
        memory: 1Gi

system:
  url: ''
  adminEmail: ''
  secretKey: 'icLq77rCyY_qrMMpXa6TQNjkDV6mU!c'
  public: false #  This should only be used if you’re installing Sentry behind your company’s firewall.

mail:
  backend: dummy # smtp
  useTls: false
  username: ''
  password: ''
  port: 25
  host: ''
  from: ''

symbolicator:
  enabled: false

auth:
  register: true

postgres:
  enabled: true
  database: sentry
  user: postgres
  password: i@ZBAsFoU4gDz_qDJVX2W8
  host: postgres
  port: 5432

rabbitmq:
  # either use RabbitMQ or Redis as broker
  enabled: true
  username: guest
  password: guest
  host: rabbitmq-ha

redis:
  host: redis-master
  password: ""
  port: 6379
  db: 0

kafka:
  host: kafka-confluent
  port: 9092

service:
  name: sentry
  type: LoadBalancer
  externalPort: 9000
  annotations: {}
  # externalIPs:
  # - 192.168.0.1
  # loadBalancerSourceRanges: []

github: {} # https://github.com/settings/apps (Create a Github App)
# github:
#   appId: "xxxx"
#   appName: MyAppName
#   clientId: "xxxxx"
#   clientSecret: "xxxxx"
#   privateKey: "-----BEGIN RSA PRIVATE KEY-----\nMIIEpA" !!!! Don't forget a trailing \n
#   webhookSecret:  "xxxxx`"

githubSso: {} # https://github.com/settings/developers (Create a OAuth App)
  # clientId: "xx"
  # clientSecret: "xx"

slack: {}
# slack:
#   clientId:
#   clientSecret:
#   verificationToken:

ingress:
  enabled: false
  # annotations:
  #   kubernetes.io/tls-acme:
  #   certmanager.k8s.io/issuer:
  #   nginx.ingress.kubernetes.io/proxy-body-size:
  #
  # hostname:
  #
  # tls:
  # - secretName:
  #   hosts:

filestore:
  # Set to one of filesystem, gcs or s3 as supported by Sentry.
  backend: filesystem

  filesystem:
    path: /var/lib/sentry/files

    ## Enable persistence using Persistent Volume Claims
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      enabled: true
      ## database data Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      # storageClass: "-"
      accessMode: ReadWriteOnce
      size: 10Gi

      ## Whether to mount the persistent volume to the Sentry worker and
      ## cron deployments. This setting needs to be enabled for some advanced
      ## Sentry features, such as private source maps. If you disable this
      ## setting, the Sentry workers will not have access to artifacts you upload
      ## through the web deployment.
      ## Please note that you may need to change your accessMode to ReadWriteMany
      ## if you plan on having the web, worker and cron deployments run on
      ## different nodes.
      persistentWorkers: false

  ## Point this at a pre-configured secret containing a service account. The resulting
  ## secret will be mounted at /var/run/secrets/google
  gcs:
    credentialsFile: credentials.json
  #  secretName:
  #  bucketName:

  ## Currently unconfigured and changing this has no impact on the template configuration.
  s3: {}
  #  accessKey:
  #  secretKey:
  #  bucketName:
  #  endpointUrl:
  #  signature_version:
  #  region_name:
  #  default_acl:

config:
  yaml: |
    # YAML
  py: |
    # PYTHON CONFIG
