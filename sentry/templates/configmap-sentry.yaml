{{- $redisHost := include "sentry.redis.host" . -}}
{{- $redisPort := include "sentry.redis.port" . -}}
{{- $redisPass := include "sentry.redis.password" . -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "sentry.fullname" . }}-sentry
  labels:
    app: sentry
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
  config.yml: |-
    {{- if .Values.system.adminEmail }}
    system.admin-email: {{ .Values.system.adminEmail }}
    {{- end }}
    system.secret-key: {{ .Values.system.secretKey }}
    {{- if .Values.system.url }}
    system.url-prefix: {{ .Values.system.url }}
    {{- end }}

    symbolicator.enabled: {{ .Values.symbolicator.enabled }}
    symbolicator.options:
      url: "http://{{ template "sentry.fullname" . }}-symbolicator:3021"

    {{- if .Values.github.appId }}
    github-app.id: {{ .Values.github.appId }}
    {{ end }}
    {{- if .Values.github.appName }}
    github-app.name: "{{ .Values.github.appName }}"
    {{ end }}
    {{- if .Values.github.privateKey }}
    github-app.private-key: |-
      {{ .Values.github.privateKey | nindent 8 }}"
    {{ end }}
    {{- if .Values.github.webhookSecret }}
    github-app.webhook-secret: "{{ .Values.github.webhookSecret }}"
    {{ end }}
    {{- if .Values.github.clientId }}
    github-app.client-id: "{{ .Values.github.clientId }}"
    {{ end }}
    {{- if .Values.github.clientSecret }}
    github-app.client-secret: "{{ .Values.github.clientSecret }}"
    {{ end }}

    {{- if .Values.slack.clientId }}
    slack.client-id: "{{ .Values.slack.clientId }}"
    slack.client-secret: "{{ .Values.slack.clientSecret }}"
    slack.verification-token: "{{ .Values.slack.verificationToken }}"
    {{ end }}

    ################
    #    Redis     #
    ################
    redis.clusters:
      default:
        hosts:
          0:
            host: "{{ $redisHost }}"
            port: {{ $redisPort }}
            {{- if $redisPass }}
            password: "{{ $redisPass }}"
            {{- end }}

    ################
    # File storage #
    ################
    # Uploaded media uses these `filestore` settings. The available
    # backends are either `filesystem` or `s3`.
    filestore.backend: '{{ .Values.filestore.backend }}'
    {{- if eq .Values.filestore.backend "filesystem" }}
    filestore.options:
      location: '{{ .Values.filestore.filesystem.path }}'
    {{ end }}
    {{- if eq .Values.filestore.backend "gcs" }}
    filestore.options:
      bucket_name: '{{ .Values.filestore.gcs.bucketName }}'
    {{ end }}
    {{- if eq .Values.filestore.backend "s3" }}
    filestore.options:
      {{- if .Values.filestore.s3.accessKey }}
      access_key: '{{ .Values.filestore.s3.accessKey }}'
      {{- end }}
      {{- if .Values.filestore.s3.secretKey }}
      secret_key: '{{ .Values.filestore.s3.secretKey }}'
      {{- end }}
      {{- if .Values.filestore.s3.bucketName }}
      bucket_name: '{{ .Values.filestore.s3.bucketName }}'
      {{- end }}
      {{- if .Values.filestore.s3.endpointUrl }}
      endpoint_url: '{{ .Values.filestore.s3.endpointUrl }}'
      {{- end }}
      {{- if .Values.filestore.s3.signature_version }}
      signature_version: '{{ .Values.filestore.s3.signature_version }}'
      {{- end }}
      {{- if .Values.filestore.s3.region_name }}
      region_name: '{{ .Values.filestore.s3.region_name }}'
      {{- end }}
      {{- if .Values.filestore.s3.default_acl }}
      default_acl: '{{ .Values.filestore.s3.default_acl }}'
      {{- end }}
    {{ end }}

{{ .Values.config.configYml | indent 4 }}
  sentry.conf.py: |-
    from sentry.conf.server import *  # NOQA
    from distutils.util import strtobool

    DATABASES = {
        "default": {
            "ENGINE": "sentry.db.postgres",
            "NAME": "{{ include "sentry.postgresql.database" . }}",
            "USER": "{{ include "sentry.postgresql.username" . }}",
            "PASSWORD": os.environ.get("POSTGRES_PASSWORD", "{{ include "sentry.postgresql.password" . }}"),
            "HOST": "{{ include "sentry.postgresql.host" . }}",
            "PORT": {{ template "sentry.postgresql.port" . }},
            {{- if .Values.externalPostgresql.sslMode }}
            'OPTIONS': {
                'sslmode': '{{ .Values.externalPostgresql.sslMode }}',
            },
            {{- end }}
        }
    }

    # You should not change this setting after your database has been created
    # unless you have altered all schemas first
    SENTRY_USE_BIG_INTS = True

    ###########
    # General #
    ###########

    # Instruct Sentry that this install intends to be run by a single organization
    # and thus various UI optimizations should be enabled.
    SENTRY_SINGLE_ORGANIZATION = True

    SENTRY_OPTIONS["system.event-retention-days"] = int(env('SENTRY_EVENT_RETENTION_DAYS') or 90)

    #########
    # Queue #
    #########

    # See https://docs.getsentry.com/on-premise/server/queue/ for more
    # information on configuring your queue broker and workers. Sentry relies
    # on a Python framework called Celery to manage queues.
    
    {{- if or (.Values.rabbitmq.enabled) (.Values.rabbitmq.host) }}
    BROKER_URL = os.environ.get("BROKER_URL", "amqp://{{ .Values.rabbitmq.rabbitmqUsername }}:{{ .Values.rabbitmq.rabbitmqPassword }}@{{ template "sentry.rabbitmq.host" . }}:5672//")
    {{- else if $redisPass }}
    BROKER_URL = os.environ.get("BROKER_URL", "redis://:{{ $redisPass }}@{{ $redisHost }}:{{ $redisPort }}/0")
    {{- else }}
    BROKER_URL = os.environ.get("BROKER_URL", "redis://{{ $redisHost }}:{{ $redisPort }}/0")
    {{- end }}
      
    #########
    # Cache #
    #########

    # Sentry currently utilizes two separate mechanisms. While CACHES is not a
    # requirement, it will optimize several high throughput patterns.

    # CACHES = {
    #     "default": {
    #         "BACKEND": "django.core.cache.backends.memcached.MemcachedCache",
    #         "LOCATION": ["memcached:11211"],
    #         "TIMEOUT": 3600,
    #     }
    # }

    # A primary cache is required for things such as processing events
    SENTRY_CACHE = "sentry.cache.redis.RedisCache"

    DEFAULT_KAFKA_OPTIONS = {
        "bootstrap.servers": "{{ printf "%s:%s" (include "sentry.kafka.host" .) (include "sentry.kafka.port" .) }}",
        "message.max.bytes": 50000000,
        "socket.timeout.ms": 1000,
    }

    SENTRY_EVENTSTREAM = "sentry.eventstream.kafka.KafkaEventStream"
    SENTRY_EVENTSTREAM_OPTIONS = {"producer_configuration": DEFAULT_KAFKA_OPTIONS}

    KAFKA_CLUSTERS["default"] = DEFAULT_KAFKA_OPTIONS

    ###############
    # Rate Limits #
    ###############

    # Rate limits apply to notification handlers and are enforced per-project
    # automatically.

    SENTRY_RATELIMITER = "sentry.ratelimits.redis.RedisRateLimiter"

    ##################
    # Update Buffers #
    ##################

    # Buffers (combined with queueing) act as an intermediate layer between the
    # database and the storage API. They will greatly improve efficiency on large
    # numbers of the same events being sent to the API in a short amount of time.
    # (read: if you send any kind of real data to Sentry, you should enable buffers)

    SENTRY_BUFFER = "sentry.buffer.redis.RedisBuffer"

    ##########
    # Quotas #
    ##########

    # Quotas allow you to rate limit individual projects or the Sentry install as
    # a whole.

    SENTRY_QUOTAS = "sentry.quotas.redis.RedisQuota"

    ########
    # TSDB #
    ########

    # The TSDB is used for building charts as well as making things like per-rate
    # alerts possible.

    SENTRY_TSDB = "sentry.tsdb.redissnuba.RedisSnubaTSDB"

    #########
    # SNUBA #
    #########

    SENTRY_SEARCH = "sentry.search.snuba.EventsDatasetSnubaSearchBackend"
    SENTRY_SEARCH_OPTIONS = {}
    SENTRY_TAGSTORE_OPTIONS = {}

    ###########
    # Digests #
    ###########

    # The digest backend powers notification summaries.

    SENTRY_DIGESTS = "sentry.digests.backends.redis.RedisBackend"

    ##############
    # Web Server #
    ##############

    SENTRY_WEB_HOST = "0.0.0.0"
    SENTRY_WEB_PORT = {{ template "sentry.port" }}
    SENTRY_PUBLIC = {{ .Values.system.public | ternary "True" "False" }}
    SENTRY_WEB_OPTIONS = {
        "http": "%s:%s" % (SENTRY_WEB_HOST, SENTRY_WEB_PORT),
        "protocol": "uwsgi",
        # This is needed to prevent https://git.io/fj7Lw
        "uwsgi-socket": None,
        "http-keepalive": True,
        "memory-report": False,
        # 'workers': 3,  # the number of web workers
    }

    ###########
    # SSL/TLS #
    ###########

    # If you're using a reverse SSL proxy, you should enable the X-Forwarded-Proto
    # header and enable the settings below

    # SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    # SESSION_COOKIE_SECURE = True
    # CSRF_COOKIE_SECURE = True
    # SOCIAL_AUTH_REDIRECT_IS_HTTPS = True

    # End of SSL/TLS settings

    ############
    # Features #
    ############


    SENTRY_FEATURES = {
      "auth:register": {{ .Values.auth.register | ternary "True" "False" }}
    }
    SENTRY_FEATURES["projects:sample-events"] = False
    SENTRY_FEATURES.update(
        {
            feature: True
            for feature in (
                "organizations:discover",
                "organizations:events",
                "organizations:global-views",
                "organizations:integrations-issue-basic",
                "organizations:integrations-issue-sync",
                "organizations:invite-members",
                "organizations:new-issue-ui",
                "organizations:repos",
                "organizations:require-2fa",
                "organizations:sentry10",
                "organizations:sso-basic",
                "organizations:sso-rippling",
                "organizations:sso-saml2",
                "organizations:suggested-commits",
                "projects:custom-inbound-filters",
                "projects:data-forwarding",
                "projects:discard-groups",
                "projects:plugins",
                "projects:rate-limits",
                "projects:servicehooks",
            )
        }
    )

    #######################
    # Email Configuration #
    #######################
    SENTRY_OPTIONS['mail.backend'] = os.getenv("SENTRY_EMAIL_BACKEND", "{{ .Values.mail.backend }}")
    SENTRY_OPTIONS['mail.use-tls'] = bool(strtobool(os.getenv("SENTRY_EMAIL_USE_TLS", "{{ .Values.mail.useTls }}")))
    SENTRY_OPTIONS['mail.username'] = os.getenv("SENTRY_EMAIL_USERNAME", "{{ .Values.mail.username }}")
    SENTRY_OPTIONS['mail.password'] = os.getenv("SENTRY_EMAIL_PASSWORD", "{{ .Values.mail.password }}")
    SENTRY_OPTIONS['mail.port'] = int(os.getenv("SENTRY_EMAIL_PORT", {{ .Values.mail.port }}))
    SENTRY_OPTIONS['mail.host'] = os.getenv("SENTRY_EMAIL_HOST", "{{ .Values.mail.host }}")
    SENTRY_OPTIONS['mail.from'] = os.getenv("SENTRY_EMAIL_FROM", "{{ .Values.mail.from }}")

    ######################
    # GitHub Integration #
    #####################

    GITHUB_APP_ID = '{{ .Values.githubSso.clientId }}'
    GITHUB_API_SECRET = '{{ .Values.githubSso.clientSecret }}'

    #########################
    # Bitbucket Integration #
    ########################

    # BITBUCKET_CONSUMER_KEY = 'YOUR_BITBUCKET_CONSUMER_KEY'
    # BITBUCKET_CONSUMER_SECRET = 'YOUR_BITBUCKET_CONSUMER_SECRET'

{{ .Values.config.sentryConfPy | indent 4 }}
