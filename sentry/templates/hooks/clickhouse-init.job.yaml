{{- if .Values.hooks.enabled -}}
{{- $clickhouseHost := include "sentry.clickhouse.host" . -}}
{{- $clickhousePort := include "sentry.clickhouse.port" . -}}
{{- $clickhouseClusterName := include "sentry.clickhouse.cluster.name" . -}}
{{- $tables := "errors groupassignee groupedmessage outcomes_hourly outcomes_mv_hourly outcomes_raw sentry sessions_hourly sessions_hourly_mv sessions_raw transactions" -}}
{{- $dropQuery := "DROP TABLE IF EXISTS ${tbl}_dist" -}}
{{- $createQuery := $clickhouseClusterName | printf "CREATE TABLE ${tbl}_dist AS ${tbl}_local ENGINE = Distributed('%s', default, ${tbl}_local, rand())" -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "sentry.fullname" . }}-clickhouse-init
  labels:
    app: sentry
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": "post-install,post-upgrade"
    "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation"
    "helm.sh/hook-weight": "6"
spec:
  template:
    metadata:
      name: {{ template "sentry.fullname" . }}-clickhouse-init
      labels:
        app: sentry
        release: "{{ .Release.Name }}"
    spec:
      restartPolicy: Never
      {{- if .Values.clickhouse.clickhouse.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.clickhouse.clickhouse.imagePullSecrets | indent 8 }}
      {{- end }}
      containers:
      - name: clickhouse-init
        image: "{{ .Values.clickhouse.clickhouse.image }}:{{ .Values.clickhouse.clickhouse.imageVersion }}"
        command:
          - /bin/bash
          - -ec
          - >-
            {{- if .Values.clickhouse.enabled }}
            for tbl in {{ $tables }}; do
              for ((i=0;i<{{ .Values.clickhouse.clickhouse.replicas }};i++)); do
                clickhouse-client --database=default --host={{ $clickhouseHost }}-$i.{{ $clickhouseHost }}-headless --port={{ $clickhousePort }} --query="{{ $dropQuery }}";
                clickhouse-client --database=default --host={{ $clickhouseHost }}-$i.{{ $clickhouseHost }}-headless --port={{ $clickhousePort }} --query="{{ $createQuery }}";
                clickhouse-client --database=default --host={{ $clickhouseHost }}-replica-$i.{{ $clickhouseHost }}-replica-headless --port={{ $clickhousePort }} --query="{{ $dropQuery }}";
                clickhouse-client --database=default --host={{ $clickhouseHost }}-replica-$i.{{ $clickhouseHost }}-replica-headless --port={{ $clickhousePort }} --query="{{ $createQuery }}";
              done
            done
            {{- else }}
            for tbl in {{ $tables }}; do
              clickhouse-client --database=default --host={{ $clickhouseHost }} --port={{ $clickhousePort }} --query="{{ $dropQuery }}";
              clickhouse-client --database=default --host={{ $clickhouseHost }} --port={{ $clickhousePort }} --query="{{ $createQuery }}";
            done
            {{- end }}
{{- end }}
